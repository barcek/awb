/*
    Imports
*/

import { HTMLTreeify, objTreeify } from './set.js';
import { handleDOMTree, flattenIfDOMTree } from './use.js';
import { HTMLPrettify } from './get.js';

/*
    Constructor
*/

const Awb = function(DOMTree) {
    this.DOMTree = DOMTree;
};

/*
    Static methods
*/

Awb.of = DOMTree => {
    /*
        Returns an Awb instance with a DOMTree property
        set to 'DOMTree'
    */
    return new Awb(DOMTree);
};

Awb.sow = (seed = '<div></div>') => {
    /*
        Returns an Awb instance with a DOMTree property
        generated from 'seed': an HTML string or object
        with the following keys each of the given type:

        n    str   element name, e.g. 'div'
        as   obj   attributes as key-value pairs, incl.
                   classes (KEY cs TYPE arr) (optional)
        t    str   text content (optional)
        ds   arr   dependents in this format (optional)

        {
            n: 'p',
            as: { id: 'id', cs: [ 'cls-1', 'cls-2' ] },
            t: 'A paragraph with an id & two classes.',
            ds: [] // no descendents; key unnecessary
        }
    */
    return typeof seed === 'string'
        ? Awb.of(HTMLTreeify(seed))
        : Awb.of(objTreeify(seed));
};

/*
    Prototype
*/

Awb.prototype.map = function(handleElement = x => x, asTree = true) {
    /*
        Returns an Awb instance with a DOMTree property
        generated by applying 'handleElement' to either
        each element of the current property by default
        or the parent element only if 'asTree' is false
    */
    return asTree
        ? Awb.of(handleDOMTree(handleElement)(this.DOMTree))
        : Awb.of(handleElement(this.DOMTree));
};

Awb.prototype.join = function() {
    /*
        Returns the DOMTree property of an Awb instance
        with any Awb-wrapped descendants also unwrapped
    */
    return handleDOMTree(flattenIfDOMTree)(this.DOMTree);
};

Awb.prototype.chain = function(handleElement = x => Awb.of(x), asTree = true) {
    /*
        Returns an Awb instance with a DOMTree property
        generated by applying 'handleElement' to either
        each element of the current property by default
        or the parent element only if 'asTree' is false
        with any Awb-wrapped descendants also unwrapped
    */
    return Awb.of(this.map(handleElement, asTree).join());
};

Awb.prototype.ap = function(instance, asTree = true) {
    /*
        Returns an Awb instance with a DOMTree property
        generated using the .map method on 'instance' -
        with the current DOMTree property as a function
        partially applied to one or more other DOMTrees
    */
    return instance.map(this.DOMTree, asTree);
};

Awb.prototype.liftAN = function(handleElement, ...instances) {
    /*
        Returns an Awb instance with a DOMTree property
        generated by applying 'handleElement' using the
        .ap method to each Awb instance in 'instances',
        assuming that the last may be an 'asTree' value
    */
    const asTree = instances[instances.length - 1] === false
        ? instances.pop()
        : true;
    return instances.reduce((acc, instance) =>
        instance !== instances[instances.length - 1]
            ? acc.ap(instance, false)
            : acc.ap(instance, asTree),
    Awb.of(this.DOMTree).map(handleElement, false));
};

Awb.prototype.serialize = function(indent = 0) {
    /*
        Returns the instance's current DOMTree property
        as an HTML string indented by 'indent' where 1+
    */
    return HTMLPrettify(indent)(this.DOMTree.outerHTML);
};

/*
    Exports
*/

export default Awb;
